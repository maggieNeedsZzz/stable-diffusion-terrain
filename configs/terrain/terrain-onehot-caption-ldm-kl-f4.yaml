model:
  base_learning_rate: 1.0e-06 #0.0001
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0195
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    # loss_type: l1
    first_stage_key: image
    cond_stage_key: class_label
    image_size: 32 #64
    channels: 4 
    cond_stage_trainable: true
    conditioning_key: crossattn
    monitor: val/loss_simple_ema  
    #use_ema: False
    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32 #64
        in_channels: 4
        out_channels: 4
        model_channels: 224 #128 #192 #with f4 down factor
        attention_resolutions:
        #note: this isn\t actually the resolution but
        # the downsampling factor, i.e. this corresnponds to
        # attention on spatial resolution 8,16,32, as the
        # spatial reolution of the latents is 32 for f8
        # - 4
        # - 2
        # - 1
        - 4
        - 2
        - 1
        num_res_blocks: 2
        channel_mult:
        - 1
        - 2
        - 4
        num_head_channels: 32 # 8 #32
        use_spatial_transformer: true
        transformer_depth: 1
        context_dim: 6



    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        # monitor: val/rec_loss
        ckpt_path: # TODO AE checkpoint 
        ddconfig:
          double_z: True
          z_channels: 4
          resolution: 256
          in_channels: 4
          out_ch: 4
          ch: 128
          ch_mult: # more depth
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity
    
    cond_stage_config:
      target: ldm.modules.encoders.modules.ClassOneHotFromCaption
      params:
        n_classes: 6  # only 6 classes
        key: caption
data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 4 
    num_workers: 2 
    wrap: false 
    train:
      target: ldm.data.terrain.TerrainRGBACaptionTrain
      # sampler: 
      #   type: torch.utils.data.WeightedRandomSampler
      #   weights: "weights.json"
      params:
        size: 256
        augment: True
    validation:
      target: ldm.data.terrain.TerrainRGBACaptionValidation
      params:
        size: 256
    test:
      target: ldm.data.terrain.TerrainRGBACaptionTest
      params:
        size: 256


lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 5000
        max_images: 8
        increase_log_steps: False
